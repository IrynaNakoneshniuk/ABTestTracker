// <auto-generated />
using System;
using ABTestTracker.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABTestTracker.Migrations
{
    [DbContext(typeof(ABTestContext))]
    [Migration("20240304203432_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.ButtonColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Share")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("share");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("button_colors");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.Device", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("device_token");

                    b.HasKey("Guid");

                    b.HasIndex("DeviceToken")
                        .IsUnique();

                    b.ToTable("devices");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.ExperimentButtonColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ButtonColorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("button_color_id");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.HasKey("Id");

                    b.HasIndex("ButtonColorId");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("experiment_button_colors");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.ExperimentPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("price_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.HasIndex("PriceId");

                    b.ToTable("experiment_prices");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Share")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("share");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("prices");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.ExperimentButtonColor", b =>
                {
                    b.HasOne("ABTestTracker.DataAccess.Models.ButtonColor", "ButtonColor")
                        .WithMany("ButtonColorsExperiments")
                        .HasForeignKey("ButtonColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABTestTracker.DataAccess.Models.Device", "Device")
                        .WithOne("ButtonColor")
                        .HasForeignKey("ABTestTracker.DataAccess.Models.ExperimentButtonColor", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ButtonColor");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.ExperimentPrice", b =>
                {
                    b.HasOne("ABTestTracker.DataAccess.Models.Device", "Device")
                        .WithOne("Price")
                        .HasForeignKey("ABTestTracker.DataAccess.Models.ExperimentPrice", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABTestTracker.DataAccess.Models.Price", "Price")
                        .WithMany("ExperimentsPrice")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.ButtonColor", b =>
                {
                    b.Navigation("ButtonColorsExperiments");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.Device", b =>
                {
                    b.Navigation("ButtonColor");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("ABTestTracker.DataAccess.Models.Price", b =>
                {
                    b.Navigation("ExperimentsPrice");
                });
#pragma warning restore 612, 618
        }
    }
}
